<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- spring配置文件 -->
    <!-- 这里主要配置和业务逻辑有关的 -->

    <!--
     open component scan
     exclude-filter 的type代表什么意思？
     use-default-filters是什么意思?   -> 默认扫描所有的，用于配置exclude和include之后关闭默认行为。
      -->

    <bean class="com.github.pagehelper.PageInterceptor"/>
    <context:component-scan base-package="com.hys.ssm" >
        <!-- 只扫描有controller注解的类 -->
    </context:component-scan>

    <!-- 导入jdbc配置文件 -->
<!--    <import resource="classpath:jdbc.ccproperties"></import> 竟然不对 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${pros.driver}"/>
        <property name="url" value="${pros.url}"/>
        <property name="username" value="${pros.username}"/>
        <property name="password" value="${pros.password}"/>
    </bean>

    <!-- 配置和mybatis整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定mybatis的全局配置文件位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定mapper配置文件位置，代替mybatis文件中指定mapper的代码 -->
        <property name="mapperLocations" value="classpath:com/hys/ssm/mapper/*.xml"/>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!-- 配置扫描器，扫描dao下的所有mapper接口，将dao接口的实现类对象注入ioc容器中 -->
    <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!mapper扫描器扫描了mapper！！！！！！！！！！！！！！！！！ -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hys.ssm.mapper"/>
    </bean>
    <!-- 配置jdbcTemplate是干嘛的？ -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启事务管理 -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启注解的事务，重要的推荐采用配置式 -->
    <!-- 逻辑不通啊！ -->
    <aop:config>
        <!-- 切入点 -->
        <aop:pointcut id="txPoint" expression="execution(* com.hys.ssm..*(..))"/>
        <!-- 配置事务增强，指定如何增强切入点 -->
        <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="txPoint"/>
    </aop:config>
    <tx:advice id="transactionInterceptor">
        <tx:attributes>
            <!-- 所有方法都是事务方法 -->
            <tx:method name="*"/>
            <!-- 以get开始的所有方法都是事务方法 -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 核心配置：数据源、与mybatis的整合、事务控制 -->
</beans>